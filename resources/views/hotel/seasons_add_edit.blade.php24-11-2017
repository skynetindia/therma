@extends('layouts.app')
@section('content')
    <!--suppress ALL -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.inputmask/3.1.62/jquery.inputmask.bundle.js"></script>
    <link href="{{asset('public/css/select2.min.css')}}" rel="stylesheet" />
    <script src="{{asset('public/js/select2.full.min.js')}}"></script>
    @if(!empty(Session::get('msg')))
        <script>
            var msg = '<?php echo html_entity_decode(htmlentities(Session::get('msg'))); ?>';
            document.write(msg);
        </script>
    @endif
    @include('common.errors')
    <?php $arrlanguages = getlanguages();?>
    <?php $modules = fetch_modules(0, '', 0); ?>
    {{ Form::open(array('url' => 'hotel/season/save', 'files' => true, 'id' => 'update_profile_form')) }}
    <input type="hidden" name="season_id" value="{{ isset($seasonDetails->id) ? $seasonDetails->id : '' }}">
    <input type="hidden" name="action" value="{{isset($action) ? $action : 'add'}}">
    <div class="user-profile-wrap">
        <div class="row">
            <div class="col-md-12 col-sm-12 col-xs-12">
                <h1 class="user-profile-heading">
                    @if($action == 'add')
                        @lang('messages.keyword_add_new')
                    @else 
                        @lang('messages.keyword_update') 
                    @endif  
                        
                    @lang('messages.keyword_seasons')                     
                </h1>
                <hr/>
            </div>
        </div>
        <div class="row">                         
                <div class="col-md-12 col-sm-12 col-xs-12">
                    <div class="user-form row">
                        <div class="col-md-6 col-sm-12 col-xs-12">
                            <div class="form-group">
                                <label for="">@lang('messages.keyword_name') <span class="required">(*)</span></label>
                                <input type="text" name="name" value="{{ isset($seasonDetails->name) ? $seasonDetails->name : '' }}"  class="form-control" id="name" placeholder="{{trans('messages.keyword_name')}}">
                            </div>                            
                            <div class="form-group">
                                <label for="">{{ trans('messages.keyword_markets')}} <span class="required">(*)</span></label>
                                <?php $selectedVal = (isset($seasonDetails->category)) ? explode(",", $seasonDetails->category) : array(); ?>
                                <select name="category[]" class="form-control" id="category" multiple="multiple">
                                    <option value="ALL">ALL</option>                                    
                                    @foreach($countries as $key => $value) 
                                    <option value="{{ $value->v_sortname }}" {{(in_array($value->v_sortname, $selectedVal)) ? 'selected' : ''}} > {{ $value->v_sortname.' | '.$value->v_name }}</option>
                                    @endforeach
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6 col-sm-12 col-xs-12">
                            <div class="form-group">
                                <label for="">{{trans('messages.keyword_from')}}<span class="required">(*)</span></label>
                                <input type="text" name="season_from" value="{{ isset($seasonDetails->season_from) ? dateFormate($seasonDetails->season_from,'d-m-Y') : ''}}" class="form-control" id="season_from" placeholder="{{trans('messages.keyword_from')}}">
                            </div>
                            <div class="form-group">
                                <label for="">{{trans('messages.keyword_to')}} <span class="required">(*)</span></label>
                                <input type="text" name="season_to" value="{{ isset($seasonDetails->season_to) ?  dateFormate($seasonDetails->season_to,'d-m-Y') : '' }}" class="form-control" id="season_to" placeholder="{{trans('messages.keyword_to')}}">
                            </div>
                        </div>
                    </div><hr>
                </div>
        </div>
    </div>
    <div class="btn-shape">
        <div class="row">
            <div class="col-md-12 col-sm-12 col-xs-12">
                <div class="col-md-6 col-sm-12 col-xs-12 btn-left-shape text-left"><a href="{{url('hotel/season')}}" class="btn btn-default">@lang('messages.keyword_previous')</a></div>
                <div class="col-md-6 col-sm-12 col-xs-12 text-right"><button type="submit"  class="btn btn-default">@lang('messages.keyword_save')</button></div>
            </div>
        </div>
    </div>
    {{ Form::close() }}
    <script src="{{ url('public/js/jquery.validate.min.js')}}"></script>
    <script src="{{ url('public/js/additional-methods.min.js') }}"></script>
    <script>
    $(document).ready(function () {
            $('#season_from,#season_to').datepicker({
                format: "dd-mm-yyyy",
                daysOfWeekDisabled: [0],
                startDate: "18-07-2015",//'-30d',
                endDate: '+30d',
                orientation: "top"
            }).datepicker("setDate", res[4]);
        });
    $('#category').select2();
        $("#update_profile_form").validate({
            rules: {
                name: {
                    required: true
                },
                season_from: {
                    required: true
                },
                season_to:{
                   required: true
                }
            },
            messages: {
                name: {
                    required: "@lang('messages.keyword_please_enter_a_name')"
                },
                season_from:{
                    required: "@lang('messages.keyword_please_enter_season_from')"
                },
                season_to: {
                    required: "@lang('messages.keyword_please_enter_season_to')"
                }
            }
        });
        $(document).ready(function() {
            var phones = [{"mask": "(###) ###-####"}, {"mask": "(###) ###-####"}];
            $('#phone').inputmask({
                mask: phones,
                greedy: false,
                definitions: {'#': {validator: "[0-9]", cardinality: 1}}
            });
        });
    </script>



<script>

    var circle;

    function initMap() {

        var map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: 41.885977605235377, lng: 12.480394244191757},
            zoom: 7
        });
        /*var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 41.885977605235377, lng: 12.480394244191757},
          zoom: 7
        });*/
        //var infowindow = new google.maps.InfoWindow;
        /*var circle1 = new google.maps.Circle({
                center: new google.maps.LatLng(41.88597760523537, 12.480394244191757),
                map: map,
                radius: 65824.04444800339,          // IN METERS.
                fillColor: '#FF6600',
                fillOpacity: 0.3,
                strokeColor: "#FFF",
                strokeWeight: 0 ,
                       // DON'T SHOW CIRCLE BORDER.
            });*/
        /** @type {!HTMLInputElement} */
        var input = document.getElementById('pac-input');
        //var types = document.getElementById('type-selector');

        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        //map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);
        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var image = "{{asset('public/marker.png')}}";
        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
            icon: image,
            map: map,
            draggable: true,
            animation: google.maps.Animation.DROP,
            anchorPoint: new google.maps.Point(0, -29)
        });



        autocomplete.addListener('place_changed', function() {

            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("Autocomplete's returned place contains no geometry");
                return;
            }

            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  // Why 17? Because it looks good.
            }
            marker.setIcon(/** @type {google.maps.Icon} */({
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(35, 35)
            }));
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                    (place.address_components[0] && place.address_components[0].short_name || ''),
                    (place.address_components[1] && place.address_components[1].short_name || ''),
                    (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }
            var lat = place.geometry.location.lat();
            var long = place.geometry.location.lng();
            $("#lat").val(lat);
            $("#long").val(long);
            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
            infowindow.open(map, marker);
        });
        //google.maps.event.addDomListener(window, 'load', initMap);
    }


</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCjhyTxmz9i9mGwzB1xy6mvVYH46PD2ylE&libraries=places&callback=initMap" async defer></script>

    <script>
        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: {lat: 41.885977605235377, lng: 12.480394244191757},
                zoom: 7
            });
            /** @type {!HTMLInputElement} */
            var input = document.getElementById('address');
            //var types = document.getElementById('type-selector');

            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
            //map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);
            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);
            var image = "{{asset('public/marker.png')}}";
            var infowindow = new google.maps.InfoWindow();
            var marker = new google.maps.Marker({
                icon: image,
                map: map,
                draggable: true,
                animation: google.maps.Animation.DROP,
                anchorPoint: new google.maps.Point(0, -29)
            });
            autocomplete.addListener('place_changed', function() {
                infowindow.close();
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    window.alert("Autocomplete's returned place contains no geometry");
                    return;
                }

                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);  // Why 17? Because it looks good.
                }
                marker.setIcon(/** @type {google.maps.Icon} */({
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(35, 35)
                }));
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);

                var address = '';
                if (place.address_components) {
                    address = [
                        (place.address_components[0] && place.address_components[0].short_name || ''),
                        (place.address_components[1] && place.address_components[1].short_name || ''),
                        (place.address_components[2] && place.address_components[2].short_name || '')
                    ].join(' ');
                }
                /*var lat = place.geometry.location.lat();
                var long = place.geometry.location.lng();
                $("#lat").val(lat);
                $("#long").val(long);*/
                infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                infowindow.open(map, marker);
            });

            var acInputs = document.getElementsByClassName("addressautocomplete");
            for (var i = 0; i < acInputs.length; i++) {
                /*var autocomplete = new google.maps.places.Autocomplete(acInputs[i],options);*/
                var autocomplete1 = new google.maps.places.Autocomplete(acInputs[i]);
                autocomplete1.inputId = acInputs[i].id;
                google.maps.event.addListener(autocomplete1, 'place_changed', function () {
                    //document.getElementById("log").innerHTML = 'You used input with id ' + this.inputId;
                });
            }
            //google.maps.event.addDomListener(window, 'load', initMap);

        }
    </script>


    <script>
        $(document).ready(function(){
            $('.writing').click(function(){
                var $id = $(this).attr('id');
                $('.'+$id).prop('checked', this.checked);
            });

            $('.reading').click(function(){
                var $id = $(this).attr('id');
                $('.'+$id).prop('checked', this.checked);
            });



            $(".permission_table input[type='checkbox']").change(function(){
               var className = $(this).attr('class');
               //alert(className);
                var countTotal = $('.' + className).length; // count total class

                var countChecked = checkedLength(className); // count checked checkbox

                if(countTotal == countChecked){
                    $("#" + className).prop("checked", this.checked);
                }else{
                    $("#" + className).prop("checked", false);
                }

            });
        });

        function checkedLength(className)
        {
            var countChecked =  $('[class="'+ className +'"]:checked').length;
            return countChecked;
        }



    </script>

@endsection

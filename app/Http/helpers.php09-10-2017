<?php
	/* This day used for date add/minuser of particular day */
	$GLOBALS['datedays'] = 10;
	/*This function is used to store the log details of login user */
	function storelogs($userID,$logs){
		DB::table('member_activity_log')->insert(array(
					'user_id' => $userID,
					'logs' => $logs,
					'ip_address' => \Request::ip(),
					'log_date' => date('Y-m-d H:i:s')));
	}
	
	function getlanguages() {
		return DB::table('languages')->where('is_deleted','0')->get();
	}
	function getWizardCategoryById($id) {
		return DB::table('wizard_categories')->where(['is_deleted'=>'0','is_active'=>'0','id'=>$id])->first();		
	}
	function getWizardSubCategory($id) {
		return DB::table('wizard_categories')->where(['is_deleted'=>'0','is_active'=>'0','parent_id'=>$id])->get();		
	}

	
	function getWizardOptionByCategory($categoyid) {
		DB::enableQueryLog();
		return DB::table('wizard_categories')
		->where(['wizard_categories.is_deleted'=>'0','wizard_categories.id'=>$categoyid])
		->leftjoin('wizard_options', 'wizard_categories.id', '=', 'wizard_options.category_id')
        /*->leftjoin('wizard_options_value', 'wizard_options_value.id_stato', '=', 'stato.id_stato') */
        ->select('wizard_options.*','wizard_categories.language_key as cat_lang_key','wizard_categories.name as categoryName')
        ->get();
	}

	/* Create the wizard */
	function createwizard($value,$isdynamic = '0') {				
		if(isset($value->language_key)){		
		$html = '<label for="">'.trans('messages.'.$value->language_key).'</label>';
		if($isdynamic == '1') {
          	$html = '<label class="control-label col-md-6 col-sm-12 col-xs-12" for="">'.trans('messages.'.$value->language_key).'</label>';
		}
		else if($isdynamic == '2') {
			$html = '<div class="col-md-4 col-sm-12 col-xs-12"><div class="form-group"><label class="bold">'.trans('messages.'.$value->language_key).'</label></div></div>';
        }        
        $arrtype = DB::table('wizard_options_type')->where(['option_id'=>$value->id,'is_deleted'=>'0','is_active'=>'0'])->get();
      	foreach($arrtype as $keyelement => $valelement) {

      	  $optionValue = DB::table('wizard_options_value')->where(['option_type_id'=>$valelement->id,'is_active'=>'0','is_deleted'=>'0'])->get();
      	  /*print('<pre>');
      	  print_r($optionValue);
      	  print_r($valelement);*/   
      	  $catname = isset($value->cat_lang_key) ? trans('messages.'.$value->cat_lang_key) : '';
      	  $fieldName = $value->cat_lang_key.$value->language_key;
      	  $name = $catname.trans('messages.'.$value->language_key);
      	  $name = trim(str_replace(' ', '_',$name));
          $id = 'id_'.$keyelement.$name;
          $placeholder = trans('messages.'.$value->language_key);
          $is_required = (isset($value->is_required) && $value->is_required == '1') ? 'required' : '';
          if($valelement->type == 'text') {                      
           	$html .= '<input class="form-control" name="'.$fieldName.'" id="'.$id.'" placeholder="'.$placeholder.'" type="text" '.$is_required.'>';
          }
          elseif($valelement->type == 'textarea') {          	
          	$html .= '<textarea class="form-control" name="'.$fieldName.'" id="'.$id.'" placeholder="'.$placeholder.'" '.$is_required.'></textarea>';	
          }
          elseif($valelement->type == 'radio') {          	          	
          	foreach ($optionValue as $opValKey => $opvalValue) {
          		$html .= trans('messages.'.$opvalValue->language_key);
          		$html .= '<input class="form-control" name="'.$fieldName.'" value="'.$opvalValue->value.'" id="'.$id.'" placeholder="'.$placeholder.'" type="radio" '.$is_required.'>';	
          	}
          }
		  elseif($valelement->type == 'select') {          	
            $html .= '<select class="form-control" name="'.$fieldName.'" id="'.$id.'" '.$is_required.'>';
            /*$options = DB::table('wizard_options_value')->where('option_id',$value->id)->get();*/
            foreach($optionValue as $opkey => $opval){
            	$optionlabel = trans('messages.'.$opval->language_key);
            	$optionvalue = $opval->value;
            	$html .='<option value="'.$optionvalue.'">'.$optionlabel.'</option>';
            }
            $html .='</select>';
          }          
          elseif($valelement->type == 'checkbox') {          	
      		if($isdynamic == '1') {          	
      			foreach($optionValue as $opkey => $opval) {
              		$html .= '<div class="col-md-6 col-sm-12 col-xs-12"><div class="ryt-chk">';
              		$html .= '<input name="'.$value->cat_lang_key.'[]" id="'.$id.'" value="'.$opval->value.'" placeholder="'.$placeholder.'" type="checkbox" '.$is_required.'>';
              		$html .= '<label for="'.$id.'"></label></div></div>';                  		
              	}
      		}
      		elseif($isdynamic == '2'){
      			$html .= '<div class="col-md-8 col-sm-12 col-xs-12">';
      			foreach($optionValue as $opkey => $opval) {
	      			$html .='<div class="form-group"><div class="pagination-type"><ul class="pagination">';
	                $html .= '<li><a href="javascript:void(0);"><div class="input-group-addon"><div class="ryt-chk"><input name="'.$value->cat_lang_key.'['.$opval->id.']" id="'.$id.'" type="checkbox" value="'.$opval->value.'" '.$is_required.'><label for="'.$id.'"></label></div></div></a></li>';
	                $arrLanguage = getlanguages();
	                foreach ($arrLanguage as $keyl => $valuel) {
	                	$active = ($valuel->code == 'en') ? 'active' : '';
	                	$html .='<li class="'.$active.'"><a href="javascript:void(0);">'.$valuel->code.'</a></li>';                	
	                }               	
	                $html .='<li class="langtext" id=""><input class="form-control" name="'.$value->cat_lang_key.'_language['.$opval->id.']" id="'.$id.'_language" type="text"></li>';
	               	$html .='</ul></div></div>';
               	}
               	$html .= '</div>';	
      		}
      		else {     
      			foreach($optionValue as $opkey => $opval) {     	
      				$html .= '<input class="form-control" name="'.$fieldName.'" value="'.$opval->value.'" id="'.$id.'" placeholder="'.$placeholder.'" type="checkbox" '.$is_required.'>';
      			}
      		}
          }
        }
        return $html;  
        }       
	}

	/*Create the wizard */
	function createwizardwithlang($value,$isdynamic = '0',$editData = array()) {
		if(isset($value->language_key)){		
		$html = '<label for="">'.trans('messages.'.$value->language_key).'</label>';
		if($isdynamic == '1'){
          	$html = '<label class="control-label col-md-6 col-sm-12 col-xs-12" for="">'.trans('messages.'.$value->language_key).'</label>';
		}
        $arrtype = explode(",", $value->type);
      	foreach($arrtype as $keyelement => $valelement){
      	  $name = $value->cat_lang_key.$value->language_key;
      	  $name = trim(str_replace(' ', '_',$name));
          $id = 'id_'.$keyelement.$name;
          $placeholder = trans('messages.'.$value->language_key);
          $is_required = (isset($value->is_required) && $value->is_required == '1') ? 'required' : '';
          if($valelement == '0') {                      
           $html .= '<input class="form-control" name="'.$name.'" id="'.$id.'" placeholder="'.$placeholder.'" type="text" '.$is_required.'>';
          }
          elseif($valelement == '0') {          	
          	$html .= '<textarea class="form-control" name="'.$name.'" id="'.$id.'" placeholder="'.$placeholder.'" '.$is_required.'></textarea>';	
          }
          elseif($valelement == '2') {          	
          	$html .= '<input class="form-control" name="'.$name.'" id="'.$id.'" placeholder="'.$placeholder.'" type="radio" '.$is_required.'>';
          }
		      elseif($valelement == '3') { 
            $fieldName = trim(str_replace("keyword_", "",$value->language_key)); 
            $html .= '<select class="form-control" name="'.$name.'" id="'.$id.'" '.$is_required.'>';
            $options = DB::table('wizard_options_value')->where('option_id',$value->id)->get();
            foreach($options as $opkey => $opval) {
            	$optionlabel = trans('messages.'.$opval->language_key);
            	$optionvalue = $opval->value;
              $select = (isset($editData[$fieldName]) && $editData[$fieldName] == $optionvalue) ? 'selected' : '';
            	$html .='<option value="'.$optionvalue.'" '.$select.'>'.$optionlabel.'</option>';
            }
            $html .='</select>';
          }          
          elseif($valelement == '4') {          	
      		if($isdynamic == '1') {          	
              $html .= '<div class="col-md-6 col-sm-12 col-xs-12"><div class="ryt-chk">';
              $html .= '<input name="'.$name.'" id="'.$id.'" placeholder="'.$placeholder.'" type="checkbox" '.$is_required.'>';
              $html .= '<label for="'.$id.'"></label></div></div>';                  		
      		}
      		else {          	
      			$html .= '<input class="form-control" name="'.$name.'" id="'.$id.'" placeholder="'.$placeholder.'" type="checkbox" '.$is_required.'>';
      		}
          }
        }
        return $html;         
    }
	}


    function getWizardCategories()
    {
        $categoryitem = DB::table('wizard_categories')->select('*')
            ->where('id', '!=', 0)
            ->where('is_active', '=', 1)
            ->where('is_deleted', '=', 0)->get()->toArray();

        return $categoryitem;
    }
    function getWizardEndLevelCategories()
    {
        $categoryitem = DB::table('wizard_categories')->select('*')
            ->where('id', '!=', 0)
            ->where('is_active', '=', 0)
            ->where('is_deleted', '=', 0)->get();
         $arrLastCategory = array();   
        foreach ($categoryitem as $key => $value) {
        	$check = DB::table('wizard_categories')->where('parent_id', '!=', $value->id)->count();
        	if($check > 0){
        		$arrLastCategory[] = $value;
       	 	}
        }

        return $arrLastCategory;
    }

    function getWizardOptionTypeValue($optionid = null)
    {
        $optiontypevalue = DB::table('wizard_options_value')->select('*')            
            ->where('option_type_id',$optionid)
            ->where('is_deleted', '=', 0)->get();

        return $optiontypevalue;
    }


function generateLinkIfNotEmpty($cat_id)
{
    $category_list = DB::table('wizard_options')->select('id')
        ->where('id', '!=', 0)
        ->where('category_id', $cat_id)
        ->where('is_deleted', '=', 0)
        ->get()->toArray();

    return count($category_list);
}
/* Test Treeview  */

function fetchCategoryTree($parent = 0,  $user_tree_array = '', $cpath = array()) {

    if (!is_array($user_tree_array))
        $user_tree_array = array();


    $category_list = DB::table('wizard_categories')->select('*')
        ->where('id', '!=', 0)
        ->where('parent_id', $parent)
        ->where('is_active', '=', 0)
        ->where('is_deleted', '=', 0)
        ->orderBy('name', 'ASC')
        ->get()->toArray();


    $user_tree_array[] = "<ul class=''>";
    foreach($category_list as $row)
    {
        // url('/wizard/options')."/".$row->id
        $user_tree_array[] = "<li><a href='".( (  generateLinkIfNotEmpty($row->id) > 0 ) ? url('/wizard/options')."/".$row->id : '#' )."'  class=''>".ucfirst($row->name)."</a></li>";
        $user_tree_array[] = "<li><a href='".url('wizard/options/')."/".$row->id."'  class=''>".ucfirst($row->name)."</a></li>";

        $user_tree_array = fetchCategoryTree($row->id, $user_tree_array);
    }
    $user_tree_array[] = "</ul>";
    return $user_tree_array;
}


function fetchCategoryTreeDesign($parent = 0,$cur_lev = 0, $user_tree_array = '', $cpath =array())
{

    if (!is_array($user_tree_array)){
        $user_tree_array = array();
    }



    $category_list = DB::table('wizard_categories')->select('*')
        ->where('id', '!=', 0)
        ->where('parent_id', $parent)
        ->where('is_active', '=', 0)
        ->where('is_deleted', '=', 0)
        ->orderBy('name', 'ASC')
        ->get()->toArray();



    $user_tree_array[] = "<ul style='list-style-type:none;' class='".(($cur_lev == 0) ? 'sidebar-nav third-step-dropdown' : '')."'>";

    foreach($category_list as $row)
    {
        $cur_lev++;
        $user_tree_array[] = "<li><a href='".( (  generateLinkIfNotEmpty($row->id) > 0 ) ? url('/wizard/options')."/".$row->id : 'javascript:void(0)' )."'  class=''>".ucfirst($row->name)."</a></li>";
        $user_tree_array[] = "<li><a href='".url('wizard/options/')."/".$row->id."'  class=''>".ucfirst($row->name)."</a></li>";

        $user_tree_array = fetchCategoryTreeDesign($row->id,$cur_lev,  $user_tree_array);

    }
    $user_tree_array[] = "</ul>";

    return $user_tree_array;
}

	/* iswriteper is used to check the write permision(add/edit/delete) */
	function checkpermission($module, $sub_id, $read_write,$iswriteper = 'false') {
		if($iswriteper != 'false'){
			$request = parse_url($_SERVER['REQUEST_URI']);
			$path = ($_SERVER['HTTP_HOST'] == 'localhost') ? rtrim(str_replace('/easylangaw/', '', $request["path"]), '/') : $request["path"];
			/*$result = rtrim(str_replace(basename($_SERVER['SCRIPT_NAME']), '', $path), '/');*/			
			$result = trim(str_replace(basename($_SERVER['SCRIPT_NAME']), '', $path), '/');
			 $current_module = DB::select('select * from modulo where TRIM(BOTH "/" FROM modulo_link) = :link', ['link' => $result]); 		
					/*DB::enableQueryLog();
					$queries = DB::getQueryLog();
                    $last_query = end($queries);
                    print_r($last_query);*/
			if(empty($current_module)){
				$path = URL::previous();	
				$path = ($_SERVER['HTTP_HOST'] == 'localhost') ? rtrim(str_replace('http://'.$_SERVER['HTTP_HOST'].'/easylangaw/', '', $path), '/') : $path;				
//				$result = trim(str_replace(basename($_SERVER['SCRIPT_NAME']), '', $path), '/');			
				$result = trim(str_replace('http://'.$_SERVER['HTTP_HOST'], '', $path), '/');				
				$current_module = DB::select('select * from modulo where TRIM(BOTH "/" FROM modulo_link) = :link', ['link' => $result]);  			
					/*DB::enableQueryLog();
					$queries = DB::getQueryLog();
                    $last_query = end($queries);
                    print_r($last_query);*/
			}			
			$module = (isset($current_module[0]->modulo_sub)) ? $current_module[0]->modulo_sub : 1;	
			$sub_id = (isset($current_module[0]->id)) ? $current_module[0]->id : 12;			
		}
        //$this->module = (isset($current_module[0]->modulo_sub)) ? $current_module[0]->modulo_sub : 1;
        //$this->sub_id = (isset($current_module[0]->id)) ? $current_module[0]->id : 12;

		$user_id = Auth::user()->id;
		$user_permission = Auth::user()->permessi;
        $permission = json_decode($user_permission);		
       
        if($user_id == 0) {        	
        	return true;
        } 
        else if($user_permission != "null" && $permission != null) {        	
			$check = in_array($module.'|'.$sub_id.'|'.$read_write, $permission);//echo $check;dd($permission);
			if($check){				
				return true;
			} else {
				return false;
			}
		} else {			
			return false;
		}
	}


	function getLocationInfoByIp($IPAddress = null){
		if($IPAddress == null){
			$client  = @$_SERVER['HTTP_CLIENT_IP'];
			$forward = @$_SERVER['HTTP_X_FORWARDED_FOR'];
			$remote  = @$_SERVER['REMOTE_ADDR'];
			$result  = array('country'=>'', 'city'=>'');
			if(filter_var($client, FILTER_VALIDATE_IP)){
				$ip = $client;
			}elseif(filter_var($forward, FILTER_VALIDATE_IP)){
				$ip = $forward;
			}else{
				$ip = $remote;		
			}
			$IPAddress = $ip;
		}
		$ip_data = @json_decode(file_get_contents("http://www.geoplugin.net/json.gp?ip=".$IPAddress));    
		if($ip_data && $ip_data->geoplugin_countryName != null){
			$result['country_code'] = $ip_data->geoplugin_countryCode;
			$result['country'] = $ip_data->geoplugin_countryName;
			$result['city'] = $ip_data->geoplugin_city;
		}
		$result['country'] = !empty($result['country']) ? $result['country'] : 'italy';
		$result['city'] = !empty($result['city']) ? $result['city'] : 'milan';
		return @$result;	
	}	

	/* Here Create the unique function that used anywhere in site */
	function replace_charcter($replaceValue = array(),$content) {
		$htmlcontent = $content;
		foreach($replaceValue as $key => $val){
			$htmlcontent = str_replace($key,$val,$htmlcontent);	
		}
		return $htmlcontent;
		/*$htmlcontent = str_replace('[#SPLASHPAGE_TITLE#]',$memberdata->title,$memberdata->content);	
		echo $htmlcontent*/
	}

	function dateFormate($date,$formate = 'd/m/Y'){
		/*
		$date = str_replace('/', '-', $date);
		$formate = ($formate == null) ? $arrMainSettings['timeformate'] : $formate;*/
		$newDate = date($formate,strtotime($date));	
		return $newDate;
	}
	function wordformate($word){
		return ucwords(strtolower($word));
	}
	function stringformate($word){
		return ucfirst(strtolower($word));
	}

	/* Get the active currency details */
	function getActiveCurrency($id='0') {
		$where = ($id != '0') ? array('id'=>$id) : array('is_active'=>'0');
		$Query = DB::table('currency')->where($where)->first();
		$collection= collect($Query);
		$returnarr = $collection->toArray();
		if(!isset($Query->id)){
			$returnarr =array('id'=>'1','name'=>'Euro','symbol'=>'€','price'=>'64','code'=>'EUR','is_active'=>'0');
		}
		return $returnarr;
	}
	
	function getAllUsers($isArray=false){
		$users = DB::table('users')                
                ->select('*')
                ->where('id', '!=', 0)
                ->where('users.is_delete', '=', 0)                                                
                ->get();
		if($isArray == true){
			$users->toArray();
		}
		return $users;
	}
	function encodehelper($id){
		//return base64_encode($id);
		return substr(md5($id), 0, 8).dechex($id);
	}	
	
	function decodehelper($id){
		//return base64_decode($id);
		$md5_8 = substr($id, 0, 8);
		$real_id = hexdec(substr($id, 8));
		return ($md5_8==substr(md5($real_id), 0, 8)) ? $real_id : 0;
	}	

	

	/* This function is used to display breadcrumbs */
	function getbreadcrumbs() {
		$request = parse_url($_SERVER['REQUEST_URI']);
		$path = ($_SERVER['HTTP_HOST'] == 'localhost') ? rtrim(str_replace('/easylangaw/', '', $request["path"]), '/') : $request["path"];		
		$result = trim(str_replace(basename($_SERVER['SCRIPT_NAME']), '', $path), '/');		

		$breadcrumbsArray = array();
		if(!empty($result)){
			$moduldetails = DB::select('select * from modulo where TRIM(BOTH "/" FROM modulo_link) = :link', ['link' => $result]);		
		}

		$parentid = isset($moduldetails[0]->modulo_sub) ? $moduldetails[0]->modulo_sub : null;
		$link = isset($moduldetails[0]->modulo_link) ? $moduldetails[0]->modulo_link : '';
		$phase_key = isset($moduldetails[0]->phase_key) ? $moduldetails[0]->phase_key : null;
		$arrParentmodules[] = array('0'=>$phase_key,'1'=>$link);
		//$arrParentmodules = array();

		while($parentid != null) {
			$parentwhere = array('id'=>$parentid);
			$parenmoduldetails = DB::table('modulo')->select('*')->where($parentwhere)->first();
			$linkperant = isset($parenmoduldetails->modulo_link) ? $parenmoduldetails->modulo_link : '';
			$arrParentmodules[] = array('0'=>$parenmoduldetails->phase_key,'1'=>$linkperant); 
			$parentid = $parenmoduldetails->modulo_sub;			
		}
		$breadcrumbs = "";
		$arrBreadcrumbsArray = $arrParentmodules;		
		if(empty($arrParentmodules[0]) || empty($arrParentmodules[0][0])) {			
			$arrBreadcrumbsArray = staticbreadcrumbs($path);								
		} 		
		if(!empty($arrBreadcrumbsArray)){			
			$breadcrumbs = "<ol class='breadcrumb'>";
			foreach(array_reverse($arrBreadcrumbsArray) as $key => $val){
				//$breadcrumbs .= '<li class="breadcrumb-item">'.trans('messages.'.$val).'</li>'; 
				if(is_array($val)){					
					$breadcrumbs .= ($val[1] != null) ? '<li class="breadcrumb-item"><a href="'.url($val[1]).'">'.trans('messages.'.$val[0]).'</a></li>' : '<li class="breadcrumb-item">'.trans('messages.'.$val[0]).'</li>';					
				}
				else {
					$breadcrumbs .= '<li class="breadcrumb-item">'.trans('messages.'.$val).'</li>'; 
				}
			}
			$breadcrumbs .="</ol>";		
		}		
		return $breadcrumbs;
	}


	function staticbreadcrumbs($path) {

		$c = explode('/',$path);
		$last = explode('/', end($c));		
		
		$path = preg_replace('/[0-9]+/', '', $path);
		$key = trim(str_replace(basename($_SERVER['SCRIPT_NAME']), '', $path), '/');							

		/*$arrBreadcrumbs['url_key'] = array('CHILD PAGE Language KEY','PAREND PAGE LANGUAGE');*/
		$arrBreadcrumbs['enti/modify/corporation'] = array('keyword_modify',array('0'=>'keyword_entity','1'=>'enti/myenti'));
		$arrBreadcrumbs['enti/add'] = array('keyword_add',array('0'=>'keyword_entity','1'=>'enti/myenti'));
		$arrBreadcrumbs['estimates/modify/quote'] = array('keyword_modify',array('0'=>'keyword_quotes','1'=>'estimates/my'));
		$arrBreadcrumbs['estimates/add'] = array('keyword_add',array('0'=>'keyword_quotes','1'=>'estimates/my'));
		$arrBreadcrumbs['progetti/modify/project'] = array('keyword_modify',array('0'=>'keyword_projects','1'=>'progetti/miei'));
		$arrBreadcrumbs['progetti/add'] = array('keyword_add',array('0'=>'keyword_projects','1'=>'progetti/miei'));
		$arrBreadcrumbs['pagamenti/mostra/accounting'] = array('keyword_invoices',array('0'=>'keyword_groupings','1'=>'pagamenti'),array('0'=>'keyword_accounting','1'=>'pagamenti'));
		$arrBreadcrumbs['pagamenti/tranche/add'] = array('keyword_add',array('0'=>'keyword_invoices','1'=>'pagamenti/tranche/elenco'),array('0'=>'keyword_accounting','1'=>'pagamenti/tranche/elenco'));
		$arrBreadcrumbs['pagamenti/tranche/modifica'] = array('keyword_modify',array('0'=>'keyword_invoices','1'=>'pagamenti/tranche/elenco'),array('0'=>'keyword_accounting','1'=>'pagamenti/tranche/elenco'));		
		$arrBreadcrumbs['costi/modify'] = array('keyword_modify',array('0'=>'keyword_costs','1'=>'statistiche/economiche'),array('0'=>'keyword_statistics','1'=>'statistiche/economiche'));

		/* =================================================== Admin ===================================== */
		$arrBreadcrumbs['admin/modify/utente'] = array('keyword_add',array('0'=>'keyword_users','1'=>'admin/utenti'),array('0'=>'keyword_role_capabilities','1'=>'admin/utenti'));
		$arrBreadcrumbs['role-permessi'] = array('keyword_add',array('0'=>'keyword_permission','1'=>'utente-permessi'),'keyword_role_capabilities');
		$arrBreadcrumbs['admin/tassonomie/pacchetti/add'] = array('keyword_add',array('0'=>'keyword_packages','1'=>'admin/tassonomie/pacchetti'),'keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['admin/tassonomie/modify/pacchetto'] = array('keyword_modify',array('0'=>'keyword_packages','1'=>'admin/tassonomie/pacchetti'),'keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['admin/taxonomies/optional/add'] = array('keyword_add',array('0'=>'keyword_optional','1'=>'admin/taxonomies/optional'),'keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['admin/taxonomies/modify/optional'] = array('keyword_modify',array('0'=>'keyword_optional','1'=>'admin/taxonomies/optional'),'keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['admin/tassonomie/dipartimenti/add'] = array('keyword_add',array('0'=>'keyword_department','1'=>'admin/tassonomie/dipartimenti'),'keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['admin/tassonomie/dipartimenti/modify/department'] = array('keyword_modify',array('0'=>'keyword_department','1'=>'admin/tassonomie/dipartimenti'),'keyword_sale','keyword_taxonomies');
		$arrBreadcrumbs['taxation/add'] = array('keyword_add',array('0'=>'keyword_taxation','1'=>'taxation'),'keyword_sale','keyword_taxonomies');	
		$arrBreadcrumbs['admin/notification'] = array('keyword_add',array('0'=>'keyword_notifications','1'=>'admin/shownotification'),'keyword_notifications');	
		$arrBreadcrumbs['notification/detail'] = array('keyword_entelist',array('0'=>'keyword_notifications','1'=>'admin/shownotification'),'keyword_notifications');	
		$arrBreadcrumbs['admin/modify/quizpaackage'] = array('keyword_add',array('0'=>'keyword_quiz_pacchetto','1'=>'admin/quizpackage'),'keyword_quiz');	
		$arrBreadcrumbs['admin/modify/language'] = array('keyword_add',array('0'=>'keyword_languages','1'=>'admin/language'),array('0'=>'keyword_languages&phases','1'=>'admin/language'),'keyword_settings');	
		$arrBreadcrumbs['admin/add/languagetranslation'] = array('keyword_add',array('0'=>'keyword_language_phase','1'=>'admin/languagetranslation/1'),array('0'=>'keyword_languages&phases','1'=>'admin/language'),'keyword_settings');	
		$arrBreadcrumbs['menu/add'] = array('keyword_add',array('0'=>'keyword_menu','1'=>'admin/menu'),'keyword_settings');	
		$arrBreadcrumbs['menu/modify'] = array('keyword_modify',array('0'=>'keyword_menu','1'=>'admin/menu'),'keyword_settings');	
		$arrBreadcrumbs['admin/modify/page'] = array('keyword_add',array('0'=>'keyword_list_pages','1'=>'admin/pages'),'keyword_settings');	
		
		
		/*Below for the same url for add/edit, so that check the edit url with numerics */
		if(is_numeric($last[0])){
			$arrBreadcrumbs['admin/modify/utente'] = array('keyword_modify',array('0'=>'keyword_users','1'=>'admin/utenti'),array('0'=>'keyword_role_capabilities','1'=>'admin/utenti'));			
			$arrBreadcrumbs['role-permessi'] = array('keyword_modify',array('0'=>'keyword_permission','1'=>'utente-permessi'),'keyword_role_capabilities');
			$arrBreadcrumbs['taxation/add'] = array('keyword_modify',array('0'=>'keyword_taxation','1'=>'taxation'),'keyword_sale','keyword_taxonomies');
			$arrBreadcrumbs['admin/notification'] = array('keyword_modify',array('0'=>'keyword_notifications','1'=>'admin/shownotification'),'keyword_notifications');	
			$arrBreadcrumbs['admin/modify/quizpaackage'] = array('keyword_modify',array('0'=>'keyword_quiz_pacchetto','1'=>'admin/quizpackage'),'keyword_quiz');	
			$arrBreadcrumbs['admin/modify/language'] = array('keyword_modify',array('0'=>'keyword_languages','1'=>'admin/language'),array('0'=>'keyword_languages&phases','1'=>'admin/language'),'keyword_settings');
			$arrBreadcrumbs['admin/languagetranslation'] = array('keyword_language_phase',array('0'=>'keyword_languages&phases','1'=>'admin/language'),'keyword_settings');	
			$arrBreadcrumbs['admin/modify/languagetranslation'] = array('keyword_modify', array('0'=>'keyword_language_phase','1'=>'admin/languagetranslation/1'),array('0'=>'keyword_languages&phases','1'=>'admin/language'),'keyword_settings');	
			$arrBreadcrumbs['calendario'] = array('keyword_deadline',array('0'=>'keyword_calendar','1'=>'calendario/0'));
			$arrBreadcrumbs['admin/modify/page'] = array('keyword_modify',array('0'=>'keyword_list_pages','1'=>'admin/pages'),'keyword_settings');	
			$arrBreadcrumbs['admin/loginactivity/user'] = array('keyword_member_activity',array('0'=>'keyword_login_activity','1'=>'admin/loginactivity/user'));	

			
		}
		return isset($arrBreadcrumbs[$key]) ? $arrBreadcrumbs[$key] : array();
	}
	
	/* This function is used to list of all module for dashboard drag and drop */
	function getModules() {
		DB::connection()->enableQueryLog();
		//$arrid = "'1', '2', '3', '4', '6', '9', '21', '27','67'";
		$arrid = "'1', '2', '3', '4','21'";	
		$arrModules = DB::select(DB::raw("select * from modulo where id NOT IN (select module_id from dashboard_widgets where user_type = ".Auth::user()->dipartimento." and user_id = ".Auth::user()->id.") AND id IN($arrid)"));
		/*$queries = DB::getQueryLog();
                    $last_query = end($queries);
                    print_r($last_query);                
                    exit;
			$arrModules = DB::table('modulo')
					->select('modulo.*')					
					->Join('dashboard_widgets', 'dashboard_widgets.module_id', '=', 'modulo.id', 'left outer')
					->where(['modulo.type'=>1])->whereNull('dashboard_widgets.module_id')
					->where('dashboard_widgets.user_type', "!=", Auth::user()->dipartimento)->whereIn('modulo.id',$arrid)->get();
		*/			
		return $arrModules;
	}
	function checkmodule($id)
	{
		$where=[];
		if($id==21)
		$where=array('id'=>$id);
		else
		$where=array('modulo_sub'=>$id);
		$arrModules = DB::table('modulo')->where($where)->get();
		if(count($arrModules))
		{
			foreach($arrModules as $arr):
			if(checkpermission($arr->modulo_sub, $arr->id, 'lettura'))
			return true;
			endforeach;
		}
		return false;
	}


function writelanguagefile($type=''){
    $arrLanguages =  DB::table('languages')
        ->select('*')
        ->where('id', '!=', 0)
        ->get();
    $collection = collect($arrLanguages);
    $arrLanguages = $collection->toArray();
    /*$numItems = count($arrLanguages);
    $i = 0;*/
    foreach($arrLanguages as $key => $val){
        $path = './resources/lang/'.$val->code;
        if(!is_dir($path)) {
            mkdir($path, 0775, true);
        }
        $file = $path.'/messages.php';
        if(is_file($file)){
            unlink($file);
        }
        if(!is_file($file)){
            $content = "<?php return [";
            $phases =  DB::table('language_transalation')
                ->select('*')
                ->where('code', $val->code)
                ->get();
            $numItems = count($phases);
            $i = 0;
            foreach($phases as $phase){
                if($phase->language_value != "" && !empty($phase->language_value)) {
                    if(++$i === $numItems) {
                        $content .= '
							"'.$phase->language_key.'" => "'.htmlspecialchars($phase->language_value).'"';
                    }
                    else {
                        $content .= '
							"'.$phase->language_key.'" => "'.htmlspecialchars($phase->language_value).'",';
                    }
                }
            }
            $content .= "]; ?>";
            $fp = fopen($file,"wb");
            fwrite($fp,$content);
            fclose($fp);
        }
    }
    /* Write the php file for the js variables  *
    $jsfile = './resources/views/common/languagesjs.blade.php';
    if(is_file($jsfile)){
        unlink($jsfile);
    }
    if(!is_file($jsfile)){
        $jscontent = "<script> ";
        $jsphases =  DB::table('language_transalation')->select('*')->where('is_cmspage', 0)->whereNotNull('language_value')->groupBy('language_key')->get();
        $jsnumItems = count($jsphases);
        foreach($jsphases as $jsphase) {
            $jskey = preg_replace('/[^A-Za-z0-9\_]/', '', $jsphase->language_key);
            $jscontent .= ' var jslang_'.$jskey.' = "<?php echo nl2br(trans("messages.'.$jsphase->language_key.'")); ?>";'. PHP_EOL;
        }
        $jscontent .= "</script>";

        $jsfp = fopen($jsfile,"wb");
        fwrite($jsfp,$jscontent);
        fclose($jsfp);

    }*/

}


/*
 *  Pass array of field_name => $request->field_name type
 *
 */

function language_keyword_add($arrLang)
{
    $arrlanguages = getlanguages();
    foreach($arrLang as $k => $language_value)
    {
        $language_label = strtolower(str_replace(" ", "_", $language_value));
        $language_key = "keyword_".$language_label;

        foreach ($arrlanguages as $keylang => $valuelang)
        {

            $language_transalation = DB::table('language_transalation')
                ->where(['language_key'=>$language_key,'code'=>$valuelang->code])
                ->first();

            $arrlang=['language_label'=>$language_label,
                'language_value' => ($valuelang->code == 'en') ? $language_value : null,
                'code' => $valuelang->code];


            if(count($language_transalation) > 0) {

                DB::table('language_transalation')
                    ->where('language_key', $language_key)
                    ->where('code', $valuelang->code)
                    ->update($arrlang);
            }
            else {
                $arrlang['language_key'] = $language_key;
                DB::table('language_transalation')->insert($arrlang);
            }

        }

    }
    writelanguagefile();
}

function pre($array = '')   
{   
    echo "<pre>";   
    print_r($array);    
    echo "</pre>";    
} 

function fetchCategory()
{
    $categories = DB::table('wizard_categories')->select('id', 'name')->where(array('is_active'=> 0, 'is_deleted'=>0))->get();
    return $categories;
}

/*This function is used to get the locations */
function getlocations(){
  return DB::table('location_details')->where(['is_active'=>'0'])->get();
}  


	
	